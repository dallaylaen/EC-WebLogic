#
#  Copyright 2016 Electric Cloud, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

[% preamble %]

username = r'''
[% username %]
'''.strip()

password = r'''
[% password %]
'''.strip()

admin_url = r'''
[% admin_url %]
'''.strip()

application_name = r'''
[% app_name %]
'''.strip()

additional_options = r'''
[% additional_options %]
'''.strip()

version_identifier = r'''
[% version_identifier %]
'''.strip()

optionsDict = {}

if additional_options:
    optionsDict = parseOptions(additional_options)

if version_identifier:
    optionsDict['versionIdentifier'] = version_identifier

connect(username, password, admin_url)

if not version_identifier:
    version_identifier = '*'

plan_version = '*'

if 'planVersion' in optionsDict.keys():
    plan_version = optionsDict['planVersion']

appCount = checkIfApplicationExists(application_name, version_identifier, plan_version)

if not appCount:
    print 'ERROR' + ':' + "Application %s (version: %s) doesn't exist." % (application_name, version_identifier)
    sys.exit(1)
elif appCount > 1:
    print "WARNING" + ':' + "There are more than 1(" + str(appCount) + ") applications found."

statusCheck = isApplicationHasStatus(application_name, version_identifier, plan_version, ['STATE_ACTIVE'])
print statusCheck
if statusCheck:
    for app in statusCheck:
        print 'WARNING' + ':' + 'Application ' + app  + ' is already started.'

print "Starting application with options: %s" % (optionsDict)
status = startApplication(application_name, **optionsDict)
print status
